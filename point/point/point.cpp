// point.cpp: 定义应用程序的入口点。
//

#include <iostream>
#include <format>
using namespace std;

static char mydata[] = { 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x07,0x09,
				0x00,0x20,0x10,0x03,0x03,0x0C,0x00,0x00,0x44,0x00,
				0x00,0x33,0x00,0x47,0x0C,0x0E,0x00,0x0D,0x00,0x11,
				0x00,0x00,0x00,0x02,0x64,0x00,0x00,0x00,0xAA,0x00,
				0x00,0x00,0x64,0x10,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x02,0x00,0x74,0x0F,0x41,0x00,0x00,0x00,
				0x01,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x0A,0x00,
				0x00,0x02,0x74,0x0F,0x41,0x00,0x06,0x08,0x00,0x00,
				0x00,0x00,0x00,0x64,0x00,0x0F,0x00,0x00,0x0D,0x00,
				0x00,0x00,0x23,0x00,0x00,0x64,0x00,0x00,0x64,0x00
};

void test() {
	char c = 10;
	char* cp;
	cp = &c;
	char* cp2 = cp;
}
void dereference() {
	int i = 20;
	int* ip = &i;
	int vi = *ip;
}
void FindBloodAddr() {
	int* sp = (int*)mydata;
	for (int i = 0; i < 25; ++i) {
		cout << format("{:x}\n", *(sp + i));
	}
	char* p = mydata;
	for (int i = 0; i <= sizeof(mydata) - sizeof(int); ++i) {
		cout << i << ":";
		if (*(int*)(p + i) == 0x64) {
			cout << p + i << '\n';
		}
	}
}

char charaterName[] = {
		0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x07,0x09,
		0x00,0x20,0x10,0x03,0x03,0x0C,0x00,0x00,0x44,0x00,
		0x00,0x33,0x00,0x47,0x0C,0x0E,0x00,0x0D,0x00,0x11,
		0x00,0x00,0x00,0x02,0x64,0x00,0x00,0x00,0xAA,0x00,
		0x00,0x00,0x64,0x10,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x02,0x00,0x74,0x0F,0x41,0x00,0x00,0x00,
		0x01,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x0A,0x00,
		0x00,0x02,0x57,0x4F,0x57,0x00,0x06,0x08,0x00,0x00,
		0x00,0x00,0x00,0x64,0x00,0x0F,0x00,0x00,0x0D,0x00,
		0x00,0x00,0x23,0x00,0x00,0x64,0x00,0x00,0x64,0x00
};

int strcmp(char* p1, char* p2) {
	int i = 0;
	while (p1[i] == p2[i] && p1[i] != 0 && p2[i] != 0) {
		++i;
	}
	return p1[i] - p2[i];
}
char* FindRoleNameAddr(char* pData, int dataLen, const char* pRoleName) {
	char* p = pData;
	for (int i = 0; i <= dataLen - strlen(pRoleName); ++i) {
		//printf("%p\n", p + i);
		if (strcmp(p + i, pRoleName) == 0) {
			return p + i;
		}
	}
	return NULL;
}
int TraverRoleName(char* pData) {
	char* p = pData;
	while (p != NULL) {
		printf("%s\n", p);
		p += strlen(p) + 1;
		while (*p == 0) ++p;
	}
	return 0;
}
char structData[] = {
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x07,0x09,
	0x00,0x20,0x10,0x03,0x03,0x0C,0x00,0x00,0x44,0x00,
	0x00,0x33,0x01,0x00,0x00,0x08,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x02,0x64,0x00,0x00,0x00,0xAA,0x00,
	0x00,0x00,0x64,0x01,0x00,0x00,0x00,0x08,0x00,0x00,
	0x00,0x00,0x02,0x00,0x74,0x0F,0x41,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x0A,0x00,
	0x00,0x02,0x57,0x4F,0x57,0x00,0x06,0x08,0x00,0x00,
	0x00,0x00,0x00,0x64,0x00,0x0F,0x00,0x00,0x0D,0x00,
	0x00,0x00,0x23,0x00,0x00,0x64,0x00,0x00,0x64,0x00
};
struct TagPlayer {
	int id;
	int level;
};
int countNeedStruct(char* pData) {
	char* p = pData;
	int count = 0;
	for (int i = 0; i <= sizeof(structData) - sizeof(TagPlayer); ++i) {
		TagPlayer* pPlayer = (TagPlayer*)(p + i);
		if (pPlayer->id == 1 && pPlayer->level == 8) {
			++count;
		}
	}
	return count;
}

void arrayPoint() {
	int arr[] = { 1,2,3,4,5,6,7,8,9,10,11,12 };
	int (*px)[2];
	px = (int(*)[2])arr;
	printf("%p,%p\n", **px, arr);
}

void useArrayPoint() {
	char arr[] = {
		0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x07,0x09,
		0x00,0x20,0x10,0x03,0x03,0x0C,0x00,0x00,0x44,0x00,
		0x00,0x33,0x00,0x47,0x0C,0x0E,0x00,0x0D,0x00,0x11,
		0x00,0x00,0x00,0x02,0x64,0x00,0x00,0x00,0xAA,0x00,
		0x00,0x00,0x64,0x10,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x02,0x00,0x74,0x0F,0x41,0x00,0x00,0x00,
		0x01,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x0A,0x00,
		0x00,0x02,0x74,0x0F,0x41,0x00,0x06,0x08,0x00,0x00,
		0x00,0x00,0x00,0x64,0x00,0x0F,0x00,0x00,0x0D,0x00,
		0x00,0x00,0x23,0x00,0x00,0x64,0x00,0x00,0x64,0x00
	};
	int (*px)[2] = (int(*)[2])arr;
	int (*py)[2][3] = (int(*)[2][3])arr;
	char (*pz)[2] = (char(*)[2])arr;
	char (*pk)[2][3] = (char(*)[2][3])arr;
	printf("addr is %p, %x\n", (*(px + 0) + 0) - *px, *(*(px + 0) + 0));
	printf("addr is %p, %x\n", (*(px + 1) + 0) - *px, *(*(px + 1) + 0));
	printf("%x\n", *(*(px + 2) + 3));
	printf("%x\n", *(*(*(py + 1) + 2) + 3));
	printf("%x\n", *(*(pz + 2) + 3));
	printf("%x\n", *(*(*(pk + 2) + 3) + 4));
}

int main()
{
	cout << "Hello CMake." << endl;
	//test();
	//	dereference();
	//FindBloodAddr();
	//const char* roleName = "WOW";
	//char* ans = FindRoleNameAddr(charaterName, sizeof(charaterName), roleName);
	//printf("%s\n", ans);
	//TraverRoleName(charaterName);
	//cout << countNeedStruct(structData) << endl;
	//arrayPoint();
	useArrayPoint();
	return 0;
}
